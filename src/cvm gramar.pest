int = { ASCII_DIGIT+ }

whitespace = _{ " " | "\t" | "\r" | "\n" | comment }

string = ${ "\"" ~ inner ~ "\"" }
inner = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

literal_char = _{ 'a'..'z' | 'A'..'Z' | '0'..'9' | "_" }
literal = {literal_char+}

// Tokens

operand = _{ add | subtract | multiply | divide | xor | merge}
add      = { whitespace* ~ "+" ~ whitespace* }
subtract = { whitespace* ~ "-" ~ whitespace* }
multiply = { whitespace* ~ "*" ~ whitespace* }
divide   = { whitespace* ~ "/" ~ whitespace* }
xor      = { whitespace* ~ "^" ~ whitespace* }
merge    = { whitespace* ~ "~" ~ whitespace* }
not    = { whitespace* ~ "!" ~ whitespace* }
dot = _{ whitespace* ~ "." ~ whitespace* }
double_dots = _{ whitespace* ~ ":" ~ whitespace* }
cdot = _{ whitespace* ~ "." ~ whitespace* }
double_equal    = { whitespace* ~ "==" ~ whitespace* }
arrow    = _{ whitespace* ~ "=>" ~ whitespace* }
type_arrow    = _{ whitespace* ~ "->" ~ whitespace* }
range_operator    = _{ whitespace* ~ ".." ~ whitespace* }
not_equal    = { whitespace* ~ "!=" ~ whitespace* }
equal    = { whitespace* ~ "=" ~ whitespace* }
left_parenthesis = _{whitespace* ~ "(" ~ whitespace*}
right_parenthesis = _{whitespace* ~ ")" ~ whitespace*}
left_square_bracket = _{whitespace* ~ "[" ~ whitespace*}
right_square_bracket = _{whitespace* ~ "]" ~ whitespace*}
left_bracket = _{whitespace* ~ "{" ~ whitespace*}
right_bracket = _{whitespace* ~ "}" ~ whitespace*}
comma = _{whitespace* ~ "," ~ whitespace*}
keyword_fn = _{whitespace* ~ "fn " ~ whitespace*}
keyword_if = _{whitespace* ~ "if " ~ whitespace*}
keyword_for = _{whitespace* ~ "for " ~ whitespace*}
keyword_loop = _{whitespace* ~ "loop" ~ whitespace*}
keyword_type = _{whitespace* ~ "type " ~ whitespace*}
keyword_in = _{whitespace* ~ "in" ~ whitespace*}
keyword_static = {whitespace* ~ "static " ~ whitespace*}
keyword_else = _{whitespace* ~ "else" ~ whitespace*}
keyword_use = _{whitespace* ~ "use " ~ whitespace*}
keyword_return = _{whitespace* ~ "return " ~ whitespace*}
keyword_ref = _{whitespace* ~ "ref " ~ whitespace*}
keyword_as = _{whitespace* ~ "as " ~ whitespace*}
semicolon = _{whitespace* ~ ";" ~ whitespace*}
empty_operator = {""}

number_array = {int ~ (whitespace+ ~ int)*}

data = _{function_call | indexing | number_array | string | literal}

indexing = {left_square_bracket~(range | expr)~right_square_bracket}
function_call = {literal~left_parenthesis~terms~right_parenthesis}

variant_access = {cdot ~ literal}
operation = {operand ~ term}

expr = { term ~indexing?~(method_call | variant_access)?~(method_call | indexing)* ~ operation* ~ (keyword_as ~ literal)?}
term = _{ data | left_parenthesis ~ expr ~right_parenthesis }
terms = {(expr ~ (comma~expr)*)?}
method_call = {dot ~ literal~left_parenthesis~terms~right_parenthesis}

typed_var = {literal~whitespace+~literal}
functions_params = {(typed_var ~ (comma ~ typed_var)*)?}

instruction = {asm_statement | loop_statement | (continue_instruction~semicolon?) | (break_instruction~semicolon?) | if_statement | for_statement | (var_declaration~semicolon?) | (var_assignement~semicolon?) | (return_statement~semicolon?) | (expr~semicolon?)}

continue_instruction = {whitespace*~"continue"~whitespace*}
break_instruction = {whitespace*~"break"~whitespace*}

comment_char = {!"\n" ~ ANY}
comment = {"//" ~ comment_char* ~ "\n"}

boolean_test = {(not | empty_operator) ~ expr ~ ((double_equal | not_equal) ~ expr)?}

if_statement = {keyword_if~boolean_test~code_block~(keyword_else ~ code_block)?}

use_statement = {keyword_use~string~semicolon?}

return_statement = {keyword_return ~ expr}

range = {expr~range_operator~expr}

for_statement = {keyword_for~typed_var~keyword_in~(range | expr)~code_block}

loop_statement = {keyword_loop ~ code_block}

type_function = {keyword_static? ~ function}

type_ref = {keyword_ref ~ literal ~ equal ~ (string | number_array)~semicolon?}

type_inside = {type_function | type_ref}

type_statement = {keyword_type~literal~(double_dots~literal)?~(equal~int)?~left_bracket~type_inside*~right_bracket} 

var_declaration = {typed_var ~ equal ~ expr}
var_assignement = {(indexing | literal) ~ operand? ~ equal ~ expr}

instruction_block = _{left_bracket~(instruction ~ (instruction)*)?~right_bracket}
arrow_block = _{arrow ~ instruction}

code_block = {arrow_block | instruction_block}

function = {keyword_fn~literal~left_parenthesis~functions_params~right_parenthesis~(type_arrow~literal)?~code_block}

file_element = {function | type_statement | use_statement}

file = {file_element*}

line = {SOI ~ file ~ EOI}

// ASM 
asm_keyword= _{whitespace* ~ "asm"~whitespace*}
asm_instruction = {whitespace* ~ (i_zero | i_one | i_two | i_three | i_four) ~ semicolon ~ whitespace*}
asm_local = {"$"~literal}
asm_variable = {whitespace*~(typed_var | asm_local | literal)~whitespace*}
asm_two_arg = _{asm_variable~ "," ~ asm_variable}
asm_three_arg = _{asm_two_arg~ "," ~ asm_variable}
asm_four_arg = _{asm_three_arg~ "," ~ asm_variable}
asm_second_type = {"MOV" | "IF" | "IFN" | "LEN"}
i_two = {asm_second_type~" " ~ asm_two_arg}
asm_three_type = {"ADD" | "SUB" | "MUL" | "DIV" | "XOR" | "MERGE" | "AND" | "MOD"}
i_three = {asm_three_type~" "~asm_three_arg}
asm_four_type = {"READ"}
i_four = {asm_four_type~" "~asm_four_arg}
asm_one_type = {"INPUT" | "PRINT"}
i_one = {asm_one_type ~ asm_variable}
i_zero = {"END" | "NOOP"}
asm_statement = {asm_keyword ~ left_bracket ~ asm_instruction* ~  right_bracket}
