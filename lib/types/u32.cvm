type u32 = 4 {
    ref null = 0 0 0 0;
    ref one = 0 0 0 1;


    fn add(u32 other) -> u32 {
        Bytes out = "";
        Byte p = 4;
        Byte rem = 0;
        // We loop through all the bytes
        loop {
            if p == 0 => break;
            p -= 1;
            Byte a = self[p];
            Byte b = other[p];
            // We add them together with reminder
            Byte c = a + b + rem;
            out = c ~ out;
            rem = c.lower(a.min(b)) as Byte;
        }
        return out as u32;
    }

    fn sub(u32 other) -> u32 {
        Bytes out = "";
        Byte p = 4;
        Byte rem = 0;
        // We loop through all the bytes
        loop {
            if p == 0 => break;
            p -= 1;

            // We sub them together with reminder
            Byte t = other[p] + rem;
            Byte ele = self[p] - t;

            rem = self[p].lower(t) as Byte;

            out = ele ~ out;
        }
        return out as u32;
    }

    fn div(u32 other) -> u32 {
        u32 active = self;
        u32 out = u32.null;
        if other[0] == 0 {
            if other[1] == 0 {
                if other[2] == 0 {
                    print("A ---"~10);
                    Bytes tmp = active.__div_inner(other[3] ~ 0 0 0 as u32, out, 1 0 0 0 as u32);
                    active = tmp[0..4] as u32;
                    out = tmp[4..8] as u32;
                }
                print("B ---"~10);
                Bytes tmp = active.__div_inner(other[2] ~ other[3] ~ 0 0 as u32, out, 0 1 0 0 as u32);
                active = tmp[0..4] as u32;
                out = tmp[4..8] as u32;
            }
            print("C ---"~10);
            Bytes tmp = active.__div_inner(other[1] ~ other[2] ~ other[3] ~ 0 as u32, out, 0 0 1 0 as u32);
            active = tmp[0..4] as u32;
            out = tmp[4..8] as u32;
        }
        print("D ---"~10);
        Bytes tmp = active.__div_inner(other, out, 0 0 0 1 as u32);
        active = tmp[0..4] as u32;
        out = tmp[4..8] as u32;
        return out;
    }

    fn __div_inner(u32 other, u32 out, u32 multiplicator) -> Bytes {
        print("div--inner:"~(self as Bytes).to_string()~" - "~(other as Bytes).to_string()~10);
        if other == 0 0 0 0 => return self;
        u32 active = self;

        loop {
            if active.lower(other + u32.one) {
                break;
            }
            print((active as Bytes).to_string() ~ " - " ~ (other as Bytes).to_string() ~ " = ");

            active -= other;
            print((active as Bytes).to_string() ~ 10);
            out += multiplicator;
        }
        return active ~ out;
    }

    fn mod(u32 other) -> u32 {

        u32 out = u32.null;
        u32 active = self;
        loop {
            if active.lower(other + (u32.one)) {
                break;
            }
            active -= other;
            out += u32.one;
        }
        return active;
    }

    fn lower(u32 other) -> Boolean {
        for Byte i in 0..4 {
            if self[i].lower(other[i]) {
                return Boolean.true;
            }
            if other[i] != self[i] {
                return Boolean.false;
            }
        }
        return Boolean.false;

    }
    fn add(Bytes other) -> Panic {}
    fn sub(Bytes other) -> Panic {}
    fn mul(Bytes other) -> Panic {}
    fn div(Bytes other) -> Panic {}
    fn xor(Bytes other) -> Panic {}
    fn len() -> Byte => return 4;

    fn to_string() -> String {

        String out = "";
        u32 nb = 59 154 202 0 as u32;

        loop {
            print( (nb as Bytes).to_string() ~ " --- " ~ ( out as Bytes).to_string() ~ 10);
            print("---"~ 10);
            out = out ~ ((self % nb)[3] as Char);
            print("---  ss"~ 10);
            self /= nb;
            print("--- sssss"~ 10);
            nb /= (0 0 0 10 as u32);
            print("--- sssssssssss"~ 10);
            if nb == 0 0 0 0 {break;}
        }
        return out



        // String out = "";
        // Byte reminder = 0;
        // Byte index = 3;
        // loop {
        //     Byte i = self[index];
        //     Byte lby = i % 100 + reminder;
        //     reminder = i / 100 + (99.lower(lby) as Byte);
        //     lby = lby % 100;
        //     String formatted = lby.to_string();
        //     if formatted.len() == 1 => formatted = "0" ~ formatted;
        //     out = formatted ~ out;
        //     if index == 0 {
        //         break;
        //     }
        //     index -= 1;
        // }
        // out = reminder.to_string() ~ out;
        // return out;
        // return 0; // TODO
    }
}