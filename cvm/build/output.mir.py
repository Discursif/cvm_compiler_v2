###
### Compiled for CVM bytecode
### CVM is an open-source low level assembly with targets such as JIT, Native, C, Python, JS, Rust
### This python code as been auto-generated
###
### CVM 2020 - 2021 - All rights reserved 
### CVM is a Laurent Gaucheron software
###
### CVM 2.0.3.1741
###

def p(a):
    if a[0] == 1:
        eval("".join(list(map(lambda a:chr(a),a[1:]))))
    else:
        print("".join(list(map(lambda a:chr(a),a))), end='', flush=True)

v = {}
v[0]=[4]
v[1]=[237]
v[2]=[10]
v[3]=[1]
v[4]=[78,111,98,111,100,121,32,119,111,110,33,10]
v[5]=[32]
v[6]=[5]
v[7]=[9]
v[8]=[45,45,45,45,45,45,45,45,45,10]
v[9]=[32,124,32]
v[10]=[6]
v[11]=[3]
v[12]=[73,110,118,97,108,105,100,32,105,110,112,117,116,10]
v[13]=[8]
v[14]=[7]
v[15]=[49]
v[16]=[2]
v[17]=[69,110,116,101,114,32,97,32,112,111,115,105,116,105,111,110,32,116,111,32,112,108,97,121,32,105,110,32,58,32]
v[18]=[65,108,100,114,101,97,100,121,32,115,111,109,101,116,104,105,110,103,32,112,108,97,99,101,100,32,104,101,114,101,10]
v[19]=[0]
v[20]=[79]
v[21]=[49,50,51,52,53,54,55,56,57]
v[22]=[32,32,32,32,32,32,32,32,32]
v[23]=[88]
while True:
  v[24]=v[22][v[16][0]:v[16][0]+v[3][0]]
  v[25]=v[24]+v[2]
  v[26]=v[9]+v[25]
  v[27]=v[22][v[3][0]:v[3][0]+v[3][0]]
  v[28]=v[27]+v[26]
  v[29]=v[9]+v[28]
  v[30]=v[22][v[19][0]:v[19][0]+v[3][0]]
  v[31]=v[30]+v[29]
  p(v[31])
  p(v[8])
  v[32]=v[22][v[6][0]:v[6][0]+v[3][0]]
  v[33]=v[32]+v[2]
  v[34]=v[9]+v[33]
  v[35]=v[22][v[0][0]:v[0][0]+v[3][0]]
  v[36]=v[35]+v[34]
  v[37]=v[9]+v[36]
  v[38]=v[22][v[11][0]:v[11][0]+v[3][0]]
  v[39]=v[38]+v[37]
  p(v[39])
  p(v[8])
  v[40]=v[22][v[13][0]:v[13][0]+v[3][0]]
  v[41]=v[40]+v[2]
  v[42]=v[9]+v[41]
  v[43]=v[22][v[14][0]:v[14][0]+v[3][0]]
  v[44]=v[43]+v[42]
  v[45]=v[9]+v[44]
  v[46]=v[22][v[10][0]:v[10][0]+v[3][0]]
  v[47]=v[46]+v[45]
  p(v[47])
  p(v[17])
  v[48]=list(map(lambda a:ord(a),iter(input())))
  p(v[2])
  v[49]=[len(v[48])]
  if v[49]!=v[3]:
    p(v[12])
    continue
  v[50]=[0]
  while True:
    if v[7]==v[50]:
      v[51]=[0]
      break
    v[52]=v[21][v[50][0]:v[50][0]+v[3][0]]
    v[50]=list(map(lambda i:(v[50][i]+v[3][i%len(v[3])])%256,iter(range(len(v[50])))))
    if v[52]==v[48]:
      v[51]=[1]
      break
  if v[51]==v[19]:
    p(v[12])
    continue
  v[53]=list(map(lambda i:(v[48][i]-v[15][i%len(v[15])])%256,iter(range(len(v[48])))))
  def f0():
    v[55]=v[22][v[53][0]:v[53][0]+v[3][0]]
    if v[55]!=v[5]:
      return v[3]
    v[56]=[len(v[23])]
    v[57]=list(map(lambda i:(v[53][i]+v[56][i%len(v[56])])%256,iter(range(len(v[53])))))
    v[58]=[len(v[22])]
    v[59]=v[22][v[57][0]:v[57][0]+v[58][0]]
    v[60]=v[23]+v[59]
    v[61]=list(map(lambda i:(v[53][i]-v[19][i%len(v[19])])%256,iter(range(len(v[53])))))
    v[62]=v[22][v[19][0]:v[19][0]+v[61][0]]
    v[63]=v[62]+v[60]
    v[22]=v[63]
    v[64]=[0]
    while True:
      if v[64]==v[11]:
        v[65]=v[63][v[13][0]:v[13][0]+v[3][0]]
        v[66]=v[63][v[0][0]:v[0][0]+v[3][0]]
        v[67]=list(map(lambda i:(v[66][i]+v[65][i%len(v[65])])%256,iter(range(len(v[66])))))
        v[68]=v[63][v[19][0]:v[19][0]+v[3][0]]
        v[69]=list(map(lambda i:(v[68][i]+v[67][i%len(v[67])])%256,iter(range(len(v[68])))))
        if v[69]==v[13]:
          v[70]=[88,32,104,97,115,32,119,111,110,33,10]
          p(v[70])
          exit()
        if v[69]==v[1]:
          v[70]=[79,32,104,97,115,32,119,111,110,33,10]
          p(v[70])
          exit()
        v[71]=v[63][v[10][0]:v[10][0]+v[3][0]]
        v[72]=v[63][v[0][0]:v[0][0]+v[3][0]]
        v[73]=list(map(lambda i:(v[72][i]+v[71][i%len(v[71])])%256,iter(range(len(v[72])))))
        v[74]=v[63][v[16][0]:v[16][0]+v[3][0]]
        v[75]=list(map(lambda i:(v[74][i]+v[73][i%len(v[73])])%256,iter(range(len(v[74])))))
        if v[75]==v[13]:
          v[70]=[88,32,104,97,115,32,119,111,110,33,10]
          p(v[70])
          exit()
        if v[75]==v[1]:
          v[70]=[79,32,104,97,115,32,119,111,110,33,10]
          p(v[70])
          exit()
        v[76]=[len(v[63])]
        v[77]=[0]
        while True:
          if v[76]==v[77]:
            p(v[4])
            exit()
          v[78]=v[63][v[77][0]:v[77][0]+v[3][0]]
          v[77]=list(map(lambda i:(v[77][i]+v[3][i%len(v[3])])%256,iter(range(len(v[77])))))
          if v[78]==v[5]:
            return v[19]
      v[79]=v[64]
      v[64]=list(map(lambda i:(v[64][i]+v[3][i%len(v[3])])%256,iter(range(len(v[64])))))
      v[80]=v[63][v[79][0]:v[79][0]+v[3][0]]
      if v[80]==v[5]:
        continue
      v[81]=list(map(lambda i:(v[79][i]+v[10][i%len(v[10])])%256,iter(range(len(v[79])))))
      v[82]=v[63][v[81][0]:v[81][0]+v[3][0]]
      v[83]=list(map(lambda i:(v[79][i]+v[11][i%len(v[11])])%256,iter(range(len(v[79])))))
      v[84]=v[63][v[83][0]:v[83][0]+v[3][0]]
      v[85]=list(map(lambda i:(v[84][i]+v[82][i%len(v[82])])%256,iter(range(len(v[84])))))
      v[86]=v[63][v[79][0]:v[79][0]+v[3][0]]
      v[87]=list(map(lambda i:(v[86][i]+v[85][i%len(v[85])])%256,iter(range(len(v[86])))))
      if v[87]==v[13]:
        v[70]=[88,32,104,97,115,32,119,111,110,33,10]
        p(v[70])
        exit()
      if v[87]==v[1]:
        v[70]=[79,32,104,97,115,32,119,111,110,33,10]
        p(v[70])
        exit()
      v[88]=list(map(lambda i:(v[79][i]*v[11][i%len(v[11])])%256,iter(range(len(v[79])))))
      v[89]=list(map(lambda i:(v[88][i]+v[16][i%len(v[16])])%256,iter(range(len(v[88])))))
      v[90]=v[63][v[89][0]:v[89][0]+v[3][0]]
      v[91]=list(map(lambda i:(v[88][i]+v[3][i%len(v[3])])%256,iter(range(len(v[88])))))
      v[92]=v[63][v[91][0]:v[91][0]+v[3][0]]
      v[93]=list(map(lambda i:(v[92][i]+v[90][i%len(v[90])])%256,iter(range(len(v[92])))))
      v[94]=v[63][v[88][0]:v[88][0]+v[3][0]]
      v[95]=list(map(lambda i:(v[94][i]+v[93][i%len(v[93])])%256,iter(range(len(v[94])))))
      if v[95]==v[13]:
        v[70]=[88,32,104,97,115,32,119,111,110,33,10]
        p(v[70])
        exit()
      if v[95]==v[1]:
        v[70]=[79,32,104,97,115,32,119,111,110,33,10]
        p(v[70])
        exit()
  v[54]=f0()
  if v[54]==v[3]:
    p(v[18])
    continue
  if v[23]==v[20]:
    v[23]=[88]
  else:
    v[23]=[79]