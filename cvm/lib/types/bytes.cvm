type Bytes {
    fn add(Bytes other) -> Bytes => return add(self,other) as Bytes;
    fn sub(Bytes other) -> Bytes => return sub(self,other) as Bytes;
    fn mul(Bytes other) -> Bytes => return mul(self,other) as Bytes;
    fn div(Bytes other) -> Bytes => return div(self,other) as Bytes;
    fn mod(Bytes other) -> Bytes => return mod(self,other) as Bytes;
    fn xor(Bytes other) -> Bytes => return xor(self,other) as Bytes;
    fn and(Bytes other) -> Bytes => return and(self,other) as Bytes;
    fn or(Bytes other) -> Bytes => return or(self,other) as Bytes;
    fn index(Byte position) -> Byte => return read(self,position,1) as Byte;
    fn index_range(Byte position1,Byte position2) -> Bytes => return read(self,position1,position2-position1);
    fn len() -> Byte => return len(self) as Byte;
    fn merge(Bytes other) -> Bytes => return merge(self,other) as Bytes;
    fn replace(Byte index,Bytes otherlist) -> Bytes {
        return self.index_range(0,index) ~ otherlist ~ read(self, index + len(otherlist), len(self));
    }

    fn to_string() -> String {
        String out = "";
        for Byte i in self {
            if out.len() != 0 => out ~= " ";
            out ~= i.to_string();
        }
        return out;
    }

    fn contains(Byte byte) -> Boolean {
        for Byte i in self {
            if i == byte => return Boolean.true;
        }
        return Boolean.false;
    }

    fn not_equals(Bytes a) -> Boolean {
        asm {
            IF self, a {
                CONST $a, 0;
            } ELSE {
                CONST $a, 1;
            };
            RETURN $a;
        }
    }

    fn equals(Bytes a) -> Boolean {
        asm {
            IF self, a {
                CONST $a, 1;
            } ELSE {
                CONST $a, 0;
            };
            RETURN $a;
        }
    }

    fn to_hex() -> String {
        String out = "";
        for Byte i in self {
            //print(i.to_string()~10);
            Byte a = i / 16;
            Byte b = i % 16;
            //print("DGB"~a.to_string()~10);
            if a < 10 {
                out ~= ("0" + a) as Char;
            }
             else {
                out ~= (("A" - 10) + a) as Char;
            }
            if b < 10 {
                out ~= ("0" + b) as Char;
            } else {
                out ~= (("A" - 10) + b) as Char;
            }
        }
        return out
    }
}